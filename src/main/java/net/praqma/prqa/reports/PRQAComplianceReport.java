/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.praqma.prqa.reports;

import java.util.List;
import net.praqma.jenkins.plugin.prqa.PrqaException;
import net.praqma.prqa.PRQAComplianceStatus;
import net.praqma.prqa.PRQAContext;
import net.praqma.prqa.PRQATask;
import net.praqma.prqa.parsers.ComplianceReportHtmlParser;
import net.praqma.prqa.parsers.ReportHtmlParser;
import net.praqma.prqa.products.QAR;
import net.praqma.util.execute.AbnormalProcessTerminationException;
import net.praqma.util.execute.CmdResult;
import net.praqma.util.execute.CommandLineException;

/**
 *
 * @author Praqma
 */
public class PRQAComplianceReport<T extends PRQAComplianceStatus, K extends String> extends PRQAReport implements PRQATask<T,K> {
   private ReportHtmlParser parser;
   private PRQAContext.QARReportType type = PRQAContext.QARReportType.Compliance;
   private QAR qar;

   public PRQAComplianceReport(QAR qar) {
       this.qar = qar;
       this.parser = new ComplianceReportHtmlParser();
   }
   
   public PRQAComplianceReport() {
       this.parser = new ComplianceReportHtmlParser();
   }
   
   public PRQAComplianceReport(ReportHtmlParser parser) {
       this.parser = parser;
   }
    /**
     * @return the parser
     */
    public ReportHtmlParser getParser() {
        return parser;
    }
    
    /**
     * @param parser the parser to set
     */
    public void setParser(ReportHtmlParser parser) {
        this.parser = parser;
    }
    
    /**
     * Completes the job of creating usable data given a path to a report generated by QAR. This is the Compliance report
     * @param reportpath
     * @return 
     */
    public T completeTask(K reportpath) throws PrqaException {
                CmdResult res = null;
        try {
            res = qar.execute();
        } catch (AbnormalProcessTerminationException ex) {
            //TODO: Remove the commented lines below when we go live.
            //throw new PrqaException.PrqaCommandLineException(qar);            
        } catch (CommandLineException cle) {      
            //TODO:Remove the commented lines below when we go live.
            //throw new PrqaException.PrqaCommandLineException(qar);            
        }
        
        //Parse it.
        PRQAComplianceStatus stat = new PRQAComplianceStatus();
        
        try {
            List<String> parseResult = parser.parse(getFullReportPath(), ComplianceReportHtmlParser.totalMessagesPattern);
            if(!parseResult.isEmpty()) {
                Integer tmp = Integer.parseInt(parseResult.get(0)); 
                stat.setMessages(tmp);
            }
            
            parseResult = parser.parse(getFullReportPath(), ComplianceReportHtmlParser.fileCompliancePattern);
            if(!parseResult.isEmpty()) {
                Double tmp = Double.parseDouble(parseResult.get(0));
                stat.setFileCompliance(tmp);
            }
            parseResult = parser.parse(getFullReportPath(), ComplianceReportHtmlParser.projectCompliancePattern);
            if(!parseResult.isEmpty()) {
                Double tmp = Double.parseDouble(parseResult.get(0));
                stat.setProjectCompliance(tmp);
            }
            
        } catch (PrqaException ex) {
            
        }
        return (T)stat;
    }
    
    /**
     * Completes the job of creating usable data given a path to a report generated by QAR. This is the Compliance report
     * @param reportpath
     * @return 
     */
    public T completeTask() throws PrqaException {
        return completeTask((K)getFullReportPath());
    }
    
    /**
     * 
     * @return A string representing the final path on which we have decided to place the report file generated by QAR.
     */
    public String getFullReportPath() {
        return qar.getReportOutputPath()+"\\"+getNamingTemplate();
    }

    public String getNamingTemplate() {
        return type.toString()+" "+PRQAReport.XHTML_REPORT_EXTENSION;
    }       
}
