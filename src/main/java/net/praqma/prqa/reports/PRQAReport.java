/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.praqma.prqa.reports;

import java.io.File;
import java.io.Serializable;
import net.praqma.jenkins.plugin.prqa.PrqaException;
import net.praqma.prqa.PRQAContext;
import net.praqma.prqa.parsers.ReportHtmlParser;
import net.praqma.prqa.products.QAR;
import net.praqma.prqa.status.PRQAStatus;
import net.praqma.util.execute.CmdResult;

/**
 *Class defining a report. The report holds a commmand line too. (The QAR object) and also holds a result, 
 * 
 * @author Praqma
 */
public abstract class PRQAReport<T extends PRQAStatus> implements Serializable {
    
    protected ReportHtmlParser parser;
    protected QAR reportTool;
    private boolean useCrossModuleAnalysis;
    /*
    private boolean publishToQAV;
    private boolean singleSnapshotMode;
    
    private String uploadProjectName;
    private String snapshotName;
    private String vcsConfigFile;
    */
    //Store the result of the executed command result.
    protected CmdResult cmdResult;
    
    public static String XHTML = "xhtml";
    public static String XML = "xml";
    public static String HTML = "html";
    
    public static String XHTML_REPORT_EXTENSION = "Report."+PRQAReport.XHTML;
    public static String XML_REPORT_EXTENSION = "Report."+PRQAReport.XML;
    public static String HTML_REPORT_EXTENSION = "Report."+PRQAReport.HTML;
    
    public void setParser(ReportHtmlParser parser) {
        this.parser = parser;
    }
    
    public ReportHtmlParser getParser() {
        return this.parser;
    }
    
    public QAR getReportTool() {
        return this.reportTool;
    }
    
    public void setReportTool(QAR qar) {
        this.reportTool = qar;
    }
    
    public CmdResult getCmdResult() {
        return this.cmdResult;
    }
    
    public void setCmdResult(CmdResult res) {
        this.cmdResult = res;
    }
    
    /**
     * QAR Reports seem to follow the naming convention of this kind.
     * @return A string representing the actual filename generated by the QAR reporting tool. 
     */
    public String getNamingTemplate() {
        return reportTool.getType()+" "+PRQAReport.XHTML_REPORT_EXTENSION;
    }
    
    /**
     * Provides an alternative extension to the default XHTML extension
     * 
     *Options include:
     * 
     * PRQAReport.XML_REPORT_EXTENSION
     * PRQAReport.HTML_REPORT_EXTENSION
     * PRQAReport.XHTML_REPORT_EXTENSION
     * 
     * @param extension
     * @return 
     */
    public String getNamingTemplate(String extension) {
        return reportTool.getType()+" "+extension;
    }
    
    /**
     * Knowing the nameing convention. This will give us a complate path to the report. This should always be the Workspace directory, followed by 
     * the template name for the report.
     * @return A string representing the full path to the generated report.
     */
    public String getFullReportPath() {
        return reportTool.getReportOutputPath()+File.separator+getNamingTemplate();
    }
    
    /**
     * The task taht is to be executed on the master/slave hosting the job. 
     * @param parameter
     * @return
     * @throws PrqaException 
     */
    public abstract <T> T generateReport() throws PrqaException;
    
    public abstract String getDisplayName();

    public static PRQAReport create(PRQAContext.QARReportType type, QAR reportTool) {
        PRQAReport report = null;
        switch(type) {
            case Compliance:
                report = new PRQAComplianceReport();
                report.reportTool = reportTool;
                return report;
            case Quality:
                report = new PRQAQualityReport();
                report.reportTool = reportTool;
                return report;
            case CodeReview:
                report = new PRQACodeReviewReport();                
                report.reportTool = reportTool;
                return report;
            case Suppression:
                report = new PRQASuppressionReport();
                report.reportTool = reportTool;
                return report;
            default:
                throw new IllegalArgumentException("No valid report type given!");
        }   
    }

    /**
     * @return the useCrossModuleAnalysis
     */
    public boolean isUseCrossModuleAnalysis() {
        return useCrossModuleAnalysis;
    }

    /**
     * @param useCrossModuleAnalysis the useCrossModuleAnalysis to set
     */
    public void setUseCrossModuleAnalysis(boolean useCrossModuleAnalysis) {
        this.useCrossModuleAnalysis = useCrossModuleAnalysis;
    }
}
