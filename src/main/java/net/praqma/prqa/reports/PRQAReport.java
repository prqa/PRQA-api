/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.praqma.prqa.reports;

import java.io.File;
import java.io.Serializable;
import net.praqma.jenkins.plugin.prqa.PrqaException;
import net.praqma.jenkins.plugin.prqa.PrqaException.PrqaUploadException;
import net.praqma.prqa.PRQACommandLineUtility;
import net.praqma.prqa.PRQAContext;
import net.praqma.prqa.parsers.ReportHtmlParser;
import net.praqma.prqa.products.PRQACommandBuilder;
import net.praqma.prqa.products.QAR;
import net.praqma.prqa.status.PRQAStatus;
import net.praqma.util.execute.AbnormalProcessTerminationException;
import net.praqma.util.execute.CmdResult;

/**
 *Class defining a report. The report holds a commmand line too. (The QAR object) and also holds a result, 
 * 
 * @author Praqma
 */
public abstract class PRQAReport<T extends PRQAStatus> implements Serializable {
    
    protected ReportHtmlParser parser;
    protected QAR reportTool;
    private boolean useCrossModuleAnalysis;
    /*
    private boolean publishToQAV;
    private boolean singleSnapshotMode;
    
    private String uploadProjectName;
    private String snapshotName;
    private String vcsConfigFile;
    */
    //Store the result of the executed command result.
    protected CmdResult cmdResult;
    
    public static String XHTML = "xhtml";
    public static String XML = "xml";
    public static String HTML = "html";
    
    public static String XHTML_REPORT_EXTENSION = "Report."+PRQAReport.XHTML;
    public static String XML_REPORT_EXTENSION = "Report."+PRQAReport.XML;
    public static String HTML_REPORT_EXTENSION = "Report."+PRQAReport.HTML;
    
    public void setParser(ReportHtmlParser parser) {
        this.parser = parser;
    }
    
    public ReportHtmlParser getParser() {
        return this.parser;
    }
    
    public QAR getReportTool() {
        return this.reportTool;
    }
    
    public void setReportTool(QAR qar) {
        this.reportTool = qar;
    }
    
    public CmdResult getCmdResult() {
        return this.cmdResult;
    }
    
    public void setCmdResult(CmdResult res) {
        this.cmdResult = res;
    }
    
    /**
     * QAR Reports seem to follow the naming convention of this kind.
     * @return A string representing the actual filename generated by the QAR reporting tool. 
     */
    public String getNamingTemplate() {
        return reportTool.getType()+" "+PRQAReport.XHTML_REPORT_EXTENSION;
    }
    
    /**
     * Provides an alternative extension to the default XHTML extension
     * 
     *Options include:
     * 
     * PRQAReport.XML_REPORT_EXTENSION
     * PRQAReport.HTML_REPORT_EXTENSION
     * PRQAReport.XHTML_REPORT_EXTENSION
     * 
     * @param extension
     * @return 
     */
    public String getNamingTemplate(String extension) {
        return reportTool.getType()+" "+extension;
    }
    
    /**
     * Knowing the nameing convention. This will give us a complate path to the report. This should always be the Workspace directory, followed by 
     * the template name for the report.
     * @return A string representing the full path to the generated report.
     */
    public String getFullReportPath() {
        return reportTool.getReportOutputPath()+File.separator+getNamingTemplate();
    }
    
    /**
     * The task taht is to be executed on the master/slave hosting the job. 
     * @param parameter
     * @return
     * @throws PrqaException 
     */
    public abstract <T> T generateReport() throws PrqaException;
    /*
    public String upload(String qavOutputPath) throws PrqaException { 
        String importOperation ="";

        String program ="\"C:\\Program Files (x86)\\PRQA\\QA Verify 1.3\\Client\\upload.exe\"";
        program+=" " + PRQACommandBuilder.getHost("localhost")+ " " +PRQACommandBuilder.getUser("admin") + " " + PRQACommandBuilder.getPassword("admin") + " " + PRQACommandBuilder.getProjectDatabase(uploadProjectName)+ " " + qavOutputPath + " " + PRQACommandBuilder.getSingle(singleSnapshotMode);       
        program+= " " + PRQACommandBuilder.getSnapshotName(snapshotName);
        importOperation+=" "+program;
        try {
            PRQACommandLineUtility.run(importOperation, new File(qavOutputPath));
        } catch (Exception ex) {
            throw new PrqaException.PrqaUploadException("Upload filed in upload phase!");
        }
        return importOperation;
    }
    */
    /*
    public String qavImport(String outputPath) throws PrqaUploadException {
        //String outpath = String.format("-po qav::output=%s", reportTool.getProjectFile());
        String outpath = PRQACommandBuilder.getQavOutPathParameter(outputPath);
        
        //String commandTest = "QAW qac \"C:\\Program Files (x86)\\PRQA\\QAC-8.0-R\\projects\\examples\\examples.prj\" ";
        String command ="QAW "+reportTool.getAnalysisTool() +" "+ PRQACommandBuilder.getProjectFile(getReportTool().getProjectFile());
        
        String maseqSection ="C:\\Program\\ Files\\ (x86)\\PRQA\\QA\\ Verify\\ 1.3\\Client\\qaimport ";
        maseqSection+= "%Q %L+ -sop %D ";
        maseqSection+=PRQACommandBuilder.getVcsXmlString(vcsConfigFile);
        maseqSection+=" " + PRQACommandBuilder.getCodeAll(); 
        maseqSection+= " "+outpath+" %P+";
        command+=" "+PRQACommandBuilder.getMaseq(maseqSection, false);
        
        try {
            PRQACommandLineUtility.run(command, new File(outputPath));
        } catch (Exception ex) {
            throw new PrqaException.PrqaUploadException("Upload filed in import phase!");
        }
        
        return command;
    }
    */
    
    
    public static PRQAReport create(PRQAContext.QARReportType type, QAR reportTool) {
        PRQAReport report = null;
        switch(type) {
            case Compliance:
                report = new PRQAComplianceReport(reportTool);                                  
                return report;
            case Quality:
                report = new PRQAQualityReport(reportTool);
                return report;
            case CodeReview:
                report = new PRQACodeReviewReport(reportTool);                
                return report;
            case Suppression:
                report = new PRQASuppressionReport(reportTool);
                return report;
            default:
                throw new IllegalArgumentException("No valid report type given!");
        }
        
    }

    /**
     * @return the useCrossModuleAnalysis
     */
    public boolean isUseCrossModuleAnalysis() {
        return useCrossModuleAnalysis;
    }

    /**
     * @param useCrossModuleAnalysis the useCrossModuleAnalysis to set
     */
    public void setUseCrossModuleAnalysis(boolean useCrossModuleAnalysis) {
        this.useCrossModuleAnalysis = useCrossModuleAnalysis;
    }

    /**
     * @return the publishToQAV
     */
    /*
    public boolean isPublishToQAV() {
        return publishToQAV;
    }
*/
    /**
     * @param publishToQAV the publishToQAV to set
     */
    /*
    public void setPublishToQAV(boolean publishToQAV) {
        this.publishToQAV = publishToQAV;
    }
*/
    /**
     * @return the singleSnapshotMode
     */
    /*
    public boolean isSingleSnapshotMode() {
        return singleSnapshotMode;
    }
*/
    /**
     * @param singleSnapshotMode the singleSnapshotMode to set
     */
    /*
    public void setSingleSnapshotMode(boolean singleSnapshotMode) {
        this.singleSnapshotMode = singleSnapshotMode;
    }
*/
    /**
     * @return the uploadProjectName
     */
    /*
    public String getUploadProjectName() {
        return uploadProjectName;
    }
*/
    /**
     * @param uploadProjectName the uploadProjectName to set
     */
    /*
    public void setUploadProjectName(String uploadProjectName) {
        this.uploadProjectName = uploadProjectName;
    }
*/
    /**
     * @return the snapshotName
     */
    /*
    public String getSnapshotName() {
        return snapshotName;
    }
*/
    /**
     * @param snapshotName the snapshotName to set
     */
    /*
    public void setSnapshotName(String snapshotName, int builNumber) {
        this.snapshotName = snapshotName+builNumber;
    }
*/
    /**
     * @return the vcsConfigFile
     */
    /*
    public String getVcsConfigFile() {
        return vcsConfigFile;
    }
*/
    /**
     * @param vcsConfigFile the vcsConfigFile to set
     */
    /*
    public void setVcsConfigFile(String vcsConfigFile) {
        this.vcsConfigFile = vcsConfigFile;
    }
    
    */
}
