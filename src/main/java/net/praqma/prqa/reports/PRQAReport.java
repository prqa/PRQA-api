/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.praqma.prqa.reports;

import java.io.File;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;

import net.praqma.jenkins.plugin.prqa.PrqaException;
import net.praqma.prqa.PRQAContext;
import net.praqma.prqa.logging.Config;
import net.praqma.prqa.parsers.ReportHtmlParser;
import net.praqma.prqa.products.QAR;
import net.praqma.prqa.status.PRQAStatus;
import net.praqma.util.execute.AbnormalProcessTerminationException;
import net.praqma.util.execute.CmdResult;
import net.praqma.util.execute.CommandLineException;

/**
 *Class defining a report. The report holds a commmand line too. (The QAR object) and also holds a result, 
 * 
 * @author Praqma
 */
public abstract class PRQAReport<T extends PRQAStatus> implements Serializable {
    
	protected static final Logger logger = Logger.getLogger(Config.GLOBAL_LOGGER_NAME); 
	
    protected ReportHtmlParser parser;
    protected QAR reportTool;
    private boolean useCrossModuleAnalysis;
    
    //Store the result of the executed command result.
    protected CmdResult cmdResult;
    
    public static String XHTML = "xhtml";
    public static String XML = "xml";
    public static String HTML = "html";
    
    public static String XHTML_REPORT_EXTENSION = "Report."+PRQAReport.XHTML;
    public static String XML_REPORT_EXTENSION = "Report."+PRQAReport.XML;
    public static String HTML_REPORT_EXTENSION = "Report."+PRQAReport.HTML;
    
    public PRQAReport() {
        logger.finest(String.format("Constructor called for class PRQAReport()"));
        logger.finest(String.format("Ending execution of constructor - PRQAReport"));
    }
    
    public PRQAReport(QAR reportTool) {
    	logger.finest(String.format("Constructor called for class PRQAReport(QAR reportTool)"));
    	logger.finest(String.format("Input parameter qar type: %s; value: %s", reportTool.getClass(), reportTool));
    	
        this.reportTool = reportTool;
        
        logger.finest(String.format("Ending execution of constructor - PRQAReport"));
	}

	public void setParser(ReportHtmlParser parser) {
		logger.finest(String.format("Starting execution of method - setParser"));
		logger.finest(String.format("Input parameter parser type: %s; value: %s", parser.getClass(), parser));
		
        this.parser = parser;
        
        logger.finest(String.format("Ending execution of method - setParser"));
    }
    
    public ReportHtmlParser getParser() {
    	logger.finest(String.format("Starting execution of method - getParser"));
    	logger.finest(String.format("Returning value: %s", this.parser));
    	
        return this.parser;
    }
    
    public QAR getReportTool() {
    	logger.finest(String.format("Starting execution of method - getQar"));
    	logger.finest(String.format("Returning value: %s", this.reportTool));
    	
        return this.reportTool;
    }
    
    public void setReportTool(QAR reportTool) {
    	logger.finest(String.format("Starting execution of method - setQar"));
		logger.finest(String.format("Input parameter qar type: %s; value: %s", reportTool.getClass(), reportTool));
		
        this.reportTool = reportTool;
        
        logger.finest(String.format("Ending execution of method - setQar"));
    }
    
    public CmdResult getCmdResult() {
    	logger.finest(String.format("Starting execution of method - getCmdResult"));
    	logger.finest(String.format("Returning value: %s", this.cmdResult));
    	
        return this.cmdResult;
    }
    
    public void setCmdResult(CmdResult res) {
    	logger.finest(String.format("Starting execution of method - setCmdResult"));
		logger.finest(String.format("Input parameter res type: %s; value: %s", res.getClass(), res));
		
        this.cmdResult = res;
        
        logger.finest(String.format("Ending execution of method - setCmdResult"));
    }
    
    /**
     * QAR Reports seem to follow the naming convention of this kind.
     * @return A string representing the actual filename generated by the QAR reporting tool. 
     */
    public String getNamingTemplate() {
    	logger.finest(String.format("Starting execution of method - getNamingTemplate()"));
    	
    	String result = reportTool.getType() + " " + PRQAReport.XHTML_REPORT_EXTENSION;
    	
    	logger.finest(String.format("Returning value: %s", result));
    	
        return result;
    }
    
    /**
     * Provides an alternative extension to the default XHTML extension
     * 
     *Options include:
     * 
     * PRQAReport.XML_REPORT_EXTENSION
     * PRQAReport.HTML_REPORT_EXTENSION
     * PRQAReport.XHTML_REPORT_EXTENSION
     * 
     * @param extension
     * @return 
     */
    public String getNamingTemplate(String extension) {
    	logger.finest(String.format("Starting execution of method - getNamingTemplate(String extension)"));
    	logger.finest(String.format("Input parameter extension type: %s; value: %s", extension.getClass(), extension));
    	
    	String result = reportTool.getType() + " " + extension;
    	
    	logger.finest(String.format("Returning value: %s", result));
    	
        return result;
    }
    
    /**
     * Knowing the naming convention. This will give us a complete path to the report. This should always be the Workspace directory, followed by 
     * the template name for the report.
     * @return A string representing the full path to the generated report.
     */
    public String getFullReportPath() {
    	logger.finest(String.format("Starting execution of method - getFullReportPath"));
    	
    	String result = reportTool.getReportOutputPath() + File.separator + getNamingTemplate();
    	
    	logger.finest(String.format("Returning value: %s", result));
    	
        return result;
    }
    
    public void executeQAR() throws PrqaException {
    	logger.finest(String.format("Starting execution of method - executeQAR"));
		
		String fullReportPath = this.getFullReportPath();
		
		logger.finest(String.format("Setting full report path to: %s", fullReportPath));
		
		parser.setFullReportPath(fullReportPath);
		cmdResult = null;
		
		logger.finest(String.format("Attempting to generate report files..."));
		try {
			cmdResult = reportTool.generateReportFiles();
		} catch (AbnormalProcessTerminationException ex) {
			PrqaException.PrqaCommandLineException exception = new PrqaException.PrqaCommandLineException(reportTool, ex);
			
			logger.severe(String.format("Exception thrown type: %s; message: %s", exception.getClass(), exception.getMessage()));
			
			throw exception;
		} catch (CommandLineException cle) {
			PrqaException.PrqaCommandLineException exception = new PrqaException.PrqaCommandLineException(reportTool, cle);
			
			logger.severe(String.format("Exception thrown type: %s; message: %s", exception.getClass(), exception.getMessage()));
			
			throw exception;
		}
		logger.finest(String.format("qar executed successfully!"));
		
		logger.finest(String.format("Ending execution of method - executeQAR"));
    }
    
    /**
     * @return the useCrossModuleAnalysis
     */
    public boolean isUseCrossModuleAnalysis() {
        return useCrossModuleAnalysis;
    }

    /**
     * @param useCrossModuleAnalysis the useCrossModuleAnalysis to set
     */
    public void setUseCrossModuleAnalysis(boolean useCrossModuleAnalysis) {
        this.useCrossModuleAnalysis = useCrossModuleAnalysis;
    }
    
    
    /**
     * The task that is to be executed on the master/slave hosting the job. 
     * @param parameter
     * @return
     * @throws PrqaException 
     */
    public abstract <T> T generateReport() throws PrqaException;
    
    public abstract String getDisplayName();
    
    public static PRQAReport create(PRQAContext.QARReportType type, QAR reportTool) {
        PRQAReport report = null;
        switch(type) {
            case Compliance:
                report = new PRQAComplianceReport();
                report.reportTool = reportTool;
                return report;
            case Quality:
                report = new PRQAQualityReport();
                report.reportTool = reportTool;
                return report;
            case CodeReview:
                report = new PRQACodeReviewReport();                
                report.reportTool = reportTool;
                return report;
            case Suppression:
                report = new PRQASuppressionReport();
                report.reportTool = reportTool;
                return report;
            default:
                throw new IllegalArgumentException("No valid report type given!");
        }   
    }
}

